// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using R.ARC.Core.DataLayer.Context;

namespace R.ARC.Core.DataLayer.Migrations
{
    [DbContext(typeof(PostgreSContext))]
    [Migration("20210805151910_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.seq_task_no", "'seq_task_no', '', '1111111111', '3', '', '', 'Int64', 'False'");

            modelBuilder.Entity("R.ARC.Core.Entity.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LevelCodeStr")
                        .HasColumnType("text");

                    b.Property<string>("LevelStr")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("ZipCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Addresses","public");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.AddressMappingEntity", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<int?>("CitySequence")
                        .HasColumnType("integer");

                    b.Property<int?>("CountySequence")
                        .HasColumnType("integer");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionSequence")
                        .HasColumnType("integer");

                    b.HasKey("CountryCode");

                    b.ToTable("AddressMappings","public");

                    b.HasData(
                        new
                        {
                            CountryCode = "TR",
                            CitySequence = 2,
                            CountySequence = 3,
                            Depth = 3
                        },
                        new
                        {
                            CountryCode = "DE",
                            CitySequence = 4,
                            CountySequence = 5,
                            Depth = 5,
                            RegionSequence = 2
                        },
                        new
                        {
                            CountryCode = "US",
                            CitySequence = 4,
                            Depth = 4,
                            RegionSequence = 2
                        },
                        new
                        {
                            CountryCode = "GB",
                            CitySequence = 4,
                            CountySequence = 5,
                            Depth = 5,
                            RegionSequence = 2
                        },
                        new
                        {
                            CountryCode = "FR",
                            CitySequence = 5,
                            CountySequence = 6,
                            Depth = 7,
                            RegionSequence = 2
                        },
                        new
                        {
                            CountryCode = "VA",
                            Depth = 1
                        });
                });

            modelBuilder.Entity("R.ARC.Core.Entity.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtendedData")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long[]>("RelatedTasks")
                        .HasColumnType("bigint[]");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TaskModelType")
                        .HasColumnType("integer");

                    b.Property<long>("TaskNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('seq_task_no')");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("integer");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tasks","public");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExtendedData")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Users","public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebb4e860-9a55-4518-9c8e-344c4883a69f"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2021, 8, 5, 15, 19, 10, 348, DateTimeKind.Utc).AddTicks(9261),
                            Email = "anliridvan@hotmail.com",
                            ExtendedData = "{\"AddressList\":[{\"AddressType\":1,\"Address\":\"Cevirmeci / Ortakoy - Istanbul\",\"County\":\"Besiktas\",\"City\":\"Istanbul\",\"Region\":\"Marmara\",\"Country\":\"TR\",\"ZipCode\":34930,\"LevelCodeStr\":null,\"LevelCode\":null,\"LevelStr\":null,\"Level\":null,\"Id\":\"00000000-0000-0000-0000-000000000000\",\"CreatedBy\":\"00000000-0000-0000-0000-000000000000\",\"CreationTime\":\"2021-08-05T15:19:10.3492384Z\",\"UpdatedBy\":\"00000000-0000-0000-0000-000000000000\",\"UpdateTime\":null,\"IsDeleted\":false}]}",
                            FirstName = "Ridvan",
                            IsDeleted = false,
                            LastName = "Anli",
                            PasswordHash = new byte[] { 74, 106, 157, 73, 26, 132, 177, 251, 166, 238, 210, 5, 31, 14, 217, 214, 201, 6, 2, 180, 104, 130, 239, 243, 139, 151, 202, 233, 27, 79, 249, 115, 211, 206, 229, 191, 122, 151, 79, 211, 118, 89, 239, 234, 152, 214, 148, 47, 192, 198, 67, 243, 234, 79, 85, 203, 170, 73, 236, 201, 106, 223, 207, 61 },
                            PasswordSalt = new byte[] { 66, 72, 117, 56, 131, 48, 131, 41, 231, 121, 167, 87, 59, 90, 142, 254, 132, 248, 197, 234, 191, 54, 185, 198, 129, 5, 109, 246, 49, 182, 158, 20, 15, 252, 223, 145, 4, 93, 237, 77, 115, 216, 19, 163, 196, 107, 221, 117, 188, 207, 178, 95, 37, 57, 168, 133, 111, 96, 191, 105, 153, 49, 22, 24, 72, 201, 149, 102, 151, 120, 119, 208, 150, 139, 136, 201, 6, 64, 228, 106, 136, 198, 45, 198, 145, 73, 57, 242, 229, 51, 126, 182, 21, 106, 141, 58, 179, 242, 32, 181, 83, 3, 245, 245, 24, 55, 204, 247, 74, 33, 137, 62, 22, 7, 83, 233, 236, 59, 250, 4, 96, 236, 46, 17, 63, 51, 132, 125 },
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("R.ARC.Core.Entity.TaskEntity", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.UserEntity", "MasterUser")
                        .WithOne()
                        .HasForeignKey("R.ARC.Core.Entity.TaskEntity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
