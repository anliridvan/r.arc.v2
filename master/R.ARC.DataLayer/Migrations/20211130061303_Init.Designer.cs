// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using R.ARC.Core.DataLayer.Context;

#nullable disable

namespace R.ARC.Core.DataLayer.Migrations
{
    [DbContext(typeof(PostgreSContext))]
    [Migration("20211130061303_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("seq_task_no")
                .StartsAt(1111111111L)
                .IncrementsBy(3);

            modelBuilder.Entity("R.ARC.Core.Entity.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LevelCodeStr")
                        .HasColumnType("text");

                    b.Property<string>("LevelStr")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("ZipCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Addresses", "public");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.AddressMappingEntity", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<int?>("CitySequence")
                        .HasColumnType("integer");

                    b.Property<int?>("CountySequence")
                        .HasColumnType("integer");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionSequence")
                        .HasColumnType("integer");

                    b.HasKey("CountryCode");

                    b.ToTable("AddressMappings", "public");

                    b.HasData(
                        new
                        {
                            CountryCode = "TR",
                            CitySequence = 2,
                            CountySequence = 3,
                            Depth = 3
                        },
                        new
                        {
                            CountryCode = "DE",
                            CitySequence = 4,
                            CountySequence = 5,
                            Depth = 5,
                            RegionSequence = 2
                        },
                        new
                        {
                            CountryCode = "US",
                            CitySequence = 4,
                            Depth = 4,
                            RegionSequence = 2
                        },
                        new
                        {
                            CountryCode = "GB",
                            CitySequence = 4,
                            CountySequence = 5,
                            Depth = 5,
                            RegionSequence = 2
                        },
                        new
                        {
                            CountryCode = "FR",
                            CitySequence = 5,
                            CountySequence = 6,
                            Depth = 7,
                            RegionSequence = 2
                        },
                        new
                        {
                            CountryCode = "VA",
                            Depth = 1
                        });
                });

            modelBuilder.Entity("R.ARC.Core.Entity.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExtendedData")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long[]>("RelatedTasks")
                        .HasColumnType("bigint[]");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TaskModelType")
                        .HasColumnType("integer");

                    b.Property<long>("TaskNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('seq_task_no')");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("integer");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tasks", "public");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExtendedData")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Users", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e5afee9-e189-41c1-a4f5-4e700f10eec6"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreationTime = new DateTime(2021, 11, 30, 6, 13, 3, 770, DateTimeKind.Utc).AddTicks(2224),
                            Email = "anliridvan@hotmail.com",
                            ExtendedData = "{\"AddressList\":[{\"AddressType\":1,\"Address\":\"Cevirmeci / Ortakoy - Istanbul\",\"County\":\"Besiktas\",\"City\":\"Istanbul\",\"Region\":\"Marmara\",\"Country\":\"TR\",\"ZipCode\":34930,\"LevelCodeStr\":null,\"LevelCode\":null,\"LevelStr\":null,\"Level\":null,\"Id\":\"00000000-0000-0000-0000-000000000000\",\"CreatedBy\":\"00000000-0000-0000-0000-000000000000\",\"CreationTime\":\"2021-11-30T06:13:03.7702226Z\",\"UpdatedBy\":\"00000000-0000-0000-0000-000000000000\",\"UpdateTime\":null,\"IsDeleted\":false}]}",
                            FirstName = "Ridvan",
                            IsDeleted = false,
                            LastName = "Anli",
                            PasswordHash = new byte[] { 166, 143, 177, 30, 223, 236, 9, 155, 81, 33, 60, 39, 191, 174, 43, 136, 135, 126, 24, 255, 147, 195, 205, 155, 4, 31, 127, 167, 41, 94, 86, 242, 212, 7, 71, 100, 83, 150, 230, 46, 193, 133, 121, 1, 135, 170, 232, 19, 191, 161, 120, 28, 166, 213, 175, 173, 243, 203, 142, 21, 76, 78, 38, 114 },
                            PasswordSalt = new byte[] { 116, 207, 58, 93, 30, 236, 63, 119, 194, 207, 238, 178, 245, 247, 77, 68, 121, 183, 133, 141, 213, 181, 76, 208, 196, 182, 246, 228, 105, 154, 178, 17, 179, 2, 229, 104, 102, 194, 223, 243, 146, 223, 43, 137, 173, 85, 133, 113, 107, 53, 120, 78, 111, 34, 234, 178, 57, 33, 84, 169, 242, 92, 151, 124, 168, 107, 146, 232, 120, 21, 45, 89, 140, 160, 170, 202, 141, 160, 156, 188, 195, 208, 183, 54, 34, 196, 191, 161, 228, 112, 177, 236, 159, 38, 235, 91, 4, 168, 246, 47, 67, 108, 219, 22, 221, 203, 102, 33, 130, 134, 87, 212, 94, 202, 247, 243, 150, 162, 168, 93, 4, 71, 11, 212, 232, 73, 164, 57 },
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("R.ARC.Core.Entity.TaskEntity", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.UserEntity", "MasterUser")
                        .WithOne()
                        .HasForeignKey("R.ARC.Core.Entity.TaskEntity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MasterUser");
                });
#pragma warning restore 612, 618
        }
    }
}
